<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-04T22:39:07-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">John Vusich</title><subtitle>Welcome to my personal website.</subtitle><author><name>John Vusich</name></author><entry><title type="html">Using the MSU HPC Profile for nf-core Pipelines</title><link href="http://localhost:4000/jekyll/update/2024/08/03/msu-config-file.html" rel="alternate" type="text/html" title="Using the MSU HPC Profile for nf-core Pipelines" /><published>2024-08-03T00:00:00-04:00</published><updated>2024-08-03T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2024/08/03/msu-config-file</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/08/03/msu-config-file.html"><![CDATA[<p>In this blog post, I’ll guide you through the process of making a custom profile for the Michigan State University (MSU) HPC system with nf-core pipelines. This setup ensures that nf-core pipelines can run efficiently on the MSU HPC environment using your own data.</p>

<h2 id="step-by-step-guide">Step-by-Step Guide</h2>

<h3 id="step-1-create-the-configuration-file">Step 1: Create the Configuration File</h3>

<p>First, we need to create the <code class="language-plaintext highlighter-rouge">msu.config</code> file with the following content:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">params</span> <span class="o">{</span>
    <span class="n">config_profile_description</span> <span class="o">=</span> <span class="s1">'Michigan State University HPC profile provided by nf-core/configs.'</span>
    <span class="n">config_profile_contact</span> <span class="o">=</span> <span class="s1">'John Vusich (@johnvusich)'</span>
    <span class="n">config_profile_url</span> <span class="o">=</span> <span class="s1">'https://github.com/johnvusich/bulk-rnaseq/blob/main/msu.config'</span>
    <span class="n">max_memory</span> <span class="o">=</span> <span class="mi">250</span><span class="o">.</span><span class="na">GB</span>
    <span class="n">max_cpus</span> <span class="o">=</span> <span class="mi">40</span>
    <span class="n">max_time</span> <span class="o">=</span> <span class="mi">168</span><span class="o">.</span><span class="na">h</span> <span class="c1">// One week in hours</span>
<span class="o">}</span>

<span class="n">singularity</span> <span class="o">{</span>
    <span class="n">enabled</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">autoMounts</span> <span class="o">=</span> <span class="kc">true</span>
<span class="o">}</span>

<span class="n">process</span> <span class="o">{</span>
    <span class="n">executor</span> <span class="o">=</span> <span class="s1">'slurm'</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="step-2-add-the-config-file-to-your-repository">Step 2: Add the Config File to Your Repository</h3>
<p>Navigate to your repository on GitHub.
Go to the root directory and create a new file named msu.config.
Paste the configuration content into the file and commit the changes.</p>

<p>###Step 3: Clone Your Repository Locally
Open your terminal.</p>

<p>Clone your repository:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your_github_username/your_repository_name.git
<span class="nb">cd </span>your_repository_name
</code></pre></div></div>

<h3 id="step-4-step-4-install-dependencies">Step 4: Step 4: Install Dependencies</h3>
<ol>
  <li>Ensure you have Ruby installed. You can download it from ruby-lang.org.</li>
  <li>Install Bundler, a Ruby gem that manages dependencies for Ruby projects:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundler
</code></pre></div>    </div>
  </li>
  <li>Install Jekyll and other dependencies using Bundler:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div>    </div>
    <h3 id="step-5-build-and-serve-the-site-locally">Step 5: Build and Serve the Site Locally</h3>
  </li>
  <li>Use Jekyll’s built-in server to build and serve the site locally:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div>    </div>
  </li>
  <li>Open your web browser and go to http://localhost:4000 to see the site in action.</li>
</ol>

<h3 id="step-6-run-nf-core-pipeline-with-msuconfig">Step 6: Run nf-core Pipeline with msu.config</h3>
<ol>
  <li>Load Nextflow on the MSU HPC system:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module load nextflow
</code></pre></div>    </div>
  </li>
  <li>Run your nf-core pipeline with the msu.config profile. For example, to run the nf-core/rnaseq pipeline:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nextflow run nf-core/rnaseq <span class="nt">--reads</span> <span class="s1">'*_R{1,2}.fastq.gz'</span> <span class="nt">--genome</span> GRCh37 <span class="nt">-profile</span> msu <span class="nt">-c</span> msu.config
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="conclusion">Conclusion</h3>
<p>By following these steps, you can successfully set up and use a custom profile for the MSU HPC system to run nf-core pipelines with your own data. This configuration ensures that your nf-core pipelines run smoothly on the MSU HPC environment.</p>

<p>Stay tuned for more updates and tips on using nf-core and Jekyll!</p>

<pre><code class="language-vbnet">This markdown file provides a step-by-step guide for users to set up and use the `msu.config` file for running nf-core pipelines on the MSU HPC system.
</code></pre>]]></content><author><name>John Vusich</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[In this blog post, I’ll guide you through the process of making a custom profile for the Michigan State University (MSU) HPC system with nf-core pipelines. This setup ensures that nf-core pipelines can run efficiently on the MSU HPC environment using your own data.]]></summary></entry><entry><title type="html">HPCC Data Handling Guide: Uploading, Storing, and Sharing Sequencing Data</title><link href="http://localhost:4000/jekyll/update/2024/08/03/msu-hpcc-data-handling.html" rel="alternate" type="text/html" title="HPCC Data Handling Guide: Uploading, Storing, and Sharing Sequencing Data" /><published>2024-08-03T00:00:00-04:00</published><updated>2024-08-03T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2024/08/03/msu-hpcc-data-handling</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/08/03/msu-hpcc-data-handling.html"><![CDATA[<p>Welcome to the HPCC data handling guide. This documentation is designed to help new users understand the procedures for uploading, storing, and sharing data within the High-Performance Computing Cluster (HPCC) environment. It covers how to bring new sequencing data into the HPCC, access existing data, and share data with collaborators or the public through NCBI and GEO.</p>

<h2 id="getting-data-on-the-hpcc">Getting Data on the HPCC</h2>

<h3 id="1-new-sequencing-data">1. New Sequencing Data</h3>

<p>To upload new sequencing data to the HPCC, follow these methods:</p>

<h4 id="ftp-file-transfer-protocol">FTP (File Transfer Protocol)</h4>
<ul>
  <li>Use an FTP client to connect to the HPCC server. Credentials and server details should be provided by your system administrator.</li>
  <li>Navigate to your designated directory on the server and upload your sequencing data.</li>
</ul>

<h4 id="hard-drive">Hard Drive</h4>
<ul>
  <li>If data is on a physical hard drive, connect it to a workstation that has access to the HPCC.</li>
  <li>Use secure copy (SCP) or rsync commands to transfer data from the hard drive to the HPCC storage. Ensure data integrity by verifying file checksums post-transfer.</li>
</ul>

<h4 id="globus">Globus</h4>
<ul>
  <li>For large datasets, use Globus, a reliable file transfer service.</li>
  <li>Ensure you have access to a Globus endpoint on the HPCC. Transfer data by selecting source and destination endpoints, then initiating the transfer through the Globus web interface.</li>
</ul>

<h3 id="2-existing-sequencing-data">2. Existing Sequencing Data</h3>

<h4 id="nf-corefetchngs">nf-core/fetchngs</h4>
<ul>
  <li>The nf-core/fetchngs tool can be used to fetch sequencing data from repositories directly to the HPCC.</li>
  <li>Configure the tool with your project details and data accession numbers to automate the download process.</li>
</ul>

<h4 id="ncbi-geo-sra">NCBI, GEO, SRA</h4>
<ul>
  <li>For data stored in NCBI, GEO, or SRA, use the SRA-toolkit to download the required datasets.</li>
  <li>Commands such as fastq-dump can be used to retrieve data in FASTQ format, which is standard for sequencing data.</li>
</ul>

<h2 id="sharing-data-with-the-public-andor-collaborators">Sharing Data with the Public and/or Collaborators</h2>

<h3 id="1-uploading-to-ncbi-and-submitting-data-to-geo">1. Uploading to NCBI and Submitting Data to GEO</h3>

<h4 id="preparing-data-for-submission">Preparing Data for Submission</h4>
<ul>
  <li>Ensure that your data is properly annotated and organized. Metadata should include details about the experimental setup, sample information, and sequencing parameters.</li>
  <li>Data should be cleaned and validated to meet the submission requirements of NCBI and GEO.</li>
</ul>

<h4 id="ncbi-submission">NCBI Submission</h4>
<ul>
  <li>Create an account on NCBI and access the submission portal.</li>
  <li>Follow the guidelines for submitting raw data (FASTQ files) and associated metadata. Be sure to complete all required fields to ensure your submission is comprehensive.</li>
</ul>

<h4 id="geo-submission">GEO Submission</h4>
<ul>
  <li>To submit data to GEO, use the GEO submission portal. GEO accepts processed data (like gene expression matrices) and raw data (like FASTQ files).</li>
  <li>Include comprehensive metadata and a detailed description of the study to facilitate data reuse.</li>
</ul>

<h2 id="additional-notes">Additional Notes</h2>
<ul>
  <li>Always backup your data before transferring or submitting to avoid data loss.</li>
  <li>Regularly update your local and HPCC data inventories to keep track of what has been uploaded, processed, or shared.</li>
  <li>Submit a ticket to ICER for questions related to data handling and security.</li>
</ul>

<p>By following these guidelines, you can efficiently manage your sequencing data within the HPCC environment and ensure it is accessible for your research and collaborations.</p>]]></content><author><name>John Vusich</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Welcome to the HPCC data handling guide. This documentation is designed to help new users understand the procedures for uploading, storing, and sharing data within the High-Performance Computing Cluster (HPCC) environment. It covers how to bring new sequencing data into the HPCC, access existing data, and share data with collaborators or the public through NCBI and GEO.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/07/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-07-27T17:36:32-04:00</published><updated>2024-07-27T17:36:32-04:00</updated><id>http://localhost:4000/jekyll/update/2024/07/27/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/07/27/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>John Vusich</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>